name: "Build, Test, and Deploy ROS Container"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *"

env:
  DOCKER_IMAGE: teamdeimosiitmd/mars_rover
  PLATFORMS: linux/amd64,linux/arm64

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    
    steps:
      - name: "Checkout repository code"
        uses: actions/checkout@v4

      - name: "Free up disk space"
        run: |
          echo "=== Before cleanup ==="
          df -h
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo docker system prune -af
          echo "=== After cleanup ==="
          df -h

      - name: "Set up QEMU"
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64,amd64

      - name: "Set up Docker Buildx"
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host
            image=moby/buildkit:latest

      - name: "Build Docker image for AMD64 (testing)"
        timeout-minutes: 90
        run: |
          docker buildx build \
            --platform linux/amd64 \
            --load \
            -t ${{ env.DOCKER_IMAGE }}:test-amd64 \
            --progress=plain \
            .

      - name: "Test container startup"
        timeout-minutes: 2
        run: |
          echo "=== Testing container basic startup ==="
          docker run --rm ${{ env.DOCKER_IMAGE }}:test-amd64 bash -c "echo 'Container started successfully'"
          echo "âœ… Container startup test passed"

      - name: "Test ROS environment"
        timeout-minutes: 2
        run: |
          echo "=== Testing ROS environment ==="
          docker run --rm ${{ env.DOCKER_IMAGE }}:test-amd64 bash -c "
            source /opt/ros/\$ROS_DISTRO/setup.bash && \
            source /root/catkin_ws/devel/setup.bash && \
            echo 'âœ… ROS_DISTRO:' \$ROS_DISTRO && \
            echo 'âœ… ROS_PACKAGE_PATH:' \$ROS_PACKAGE_PATH && \
            echo 'âœ… Total ROS packages:' \$(rospack list | wc -l) && \
            echo 'âœ… Checking Mars Rover packages...' && \
            rospack find rover_description && \
            rospack find rover_control && \
            echo 'âœ… ROS environment test passed'
          "

      - name: "Test catkin workspace build"
        timeout-minutes: 2
        run: |
          echo "=== Testing catkin workspace ==="
          docker run --rm ${{ env.DOCKER_IMAGE }}:test-amd64 bash -c "
            source /opt/ros/\$ROS_DISTRO/setup.bash && \
            source /root/catkin_ws/devel/setup.bash && \
            cd /root/catkin_ws && \
            echo 'âœ… Catkin workspace location:' \$(pwd) && \
            echo 'âœ… Built packages:' && \
            catkin list && \
            echo 'âœ… Catkin workspace test passed'
          "

      - name: "Test roscore startup and shutdown"
        timeout-minutes: 2
        run: |
          echo "=== Testing roscore startup ==="
          docker run --rm ${{ env.DOCKER_IMAGE }}:test-amd64 bash -c "
            source /opt/ros/\$ROS_DISTRO/setup.bash && \
            echo 'Starting roscore...' && \
            timeout 10 roscore &
            ROSCORE_PID=\$!
            sleep 5 && \
            echo 'âœ… Checking if roscore is running...' && \
            rostopic list && \
            echo 'âœ… roscore is running' && \
            kill \$ROSCORE_PID 2>/dev/null || true && \
            wait \$ROSCORE_PID 2>/dev/null || true && \
            echo 'âœ… roscore shutdown successful' && \
            echo 'âœ… roscore test passed'
          " || echo "roscore test completed with expected timeout"

      - name: "Test rosbridge availability"
        timeout-minutes: 1
        run: |
          echo "=== Testing rosbridge package ==="
          docker run --rm ${{ env.DOCKER_IMAGE }}:test-amd64 bash -c "
            source /opt/ros/\$ROS_DISTRO/setup.bash && \
            rospack find rosbridge_server && \
            echo 'âœ… rosbridge_server package found' && \
            ls /opt/ros/noetic/share/rosbridge_server/launch/rosbridge_websocket.launch && \
            echo 'âœ… rosbridge launch file exists'
          "

      - name: "Display build summary"
        run: |
          echo "=== Build and Test Summary ==="
          echo "âœ… All tests passed successfully!"
          echo "Image: ${{ env.DOCKER_IMAGE }}:test-amd64"
          echo "Platform: linux/amd64"
          docker images | grep mars_rover

  push-to-registry:
    needs: build-and-test
    runs-on: ubuntu-latest
    timeout-minutes: 180
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: "Checkout repository code"
        uses: actions/checkout@v4

      - name: "Free up disk space"
        run: |
          echo "=== Before cleanup ==="
          df -h
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo docker system prune -af
          echo "=== After cleanup ==="
          df -h

      - name: "Set up QEMU"
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64,amd64

      - name: "Set up Docker Buildx"
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host
            image=moby/buildkit:latest

      - name: "Login to Docker Hub"
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: "Set up Docker metadata"
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=jetson-nano,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-

      - name: "Build and push multi-arch image"
        timeout-minutes: 150
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ env.PLATFORMS }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: "Image digest and summary"
        run: |
          echo "### ðŸš€ Docker Multi-Architecture Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** \`${{ env.DOCKER_IMAGE }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Platforms:** \`${{ env.PLATFORMS }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tags:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ðŸ“¦ Pull Commands" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**For Jetson Nano (ARM64):**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.DOCKER_IMAGE }}:jetson-nano" >> $GITHUB_STEP_SUMMARY
          echo "docker run -it --runtime nvidia --privileged --network host \\" >> $GITHUB_STEP_SUMMARY
          echo "  ${{ env.DOCKER_IMAGE }}:jetson-nano" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**For x86_64:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.DOCKER_IMAGE }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "docker run -it --privileged --network host \\" >> $GITHUB_STEP_SUMMARY
          echo "  ${{ env.DOCKER_IMAGE }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Build completed successfully!" >> $GITHUB_STEP_SUMMARY

      - name: "Verify pushed images"
        run: |
          echo "=== Verifying pushed images ==="
          docker buildx imagetools inspect ${{ env.DOCKER_IMAGE }}:latest
          echo ""
          echo "=== Image details ==="
          docker buildx imagetools inspect ${{ env.DOCKER_IMAGE }}:latest --raw | jq '.'