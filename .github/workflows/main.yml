name: "Build, Test, and Deploy ROS Container"

on:
  push:
    branches: [ "main", "anish-part" ]
  pull_request:
    branches: [ "main", "anish-part" ]
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *"

env:
  DOCKER_IMAGE: teamdeimosiitmd/mars_rover
  PLATFORMS: linux/amd64,linux/arm64

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    
    steps:
      - name: "Checkout repository code"
        uses: actions/checkout@v4

      - name: "Free up disk space"
        run: |
          echo "=== Before cleanup ==="
          df -h
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo docker system prune -af
          echo "=== After cleanup ==="
          df -h

      - name: "Set up QEMU"
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64,amd64

      - name: "Set up Docker Buildx"
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host
            image=moby/buildkit:latest

      - name: "Build Docker image for AMD64 (testing)"
        timeout-minutes: 90
        run: |
          docker buildx build \
            --platform linux/amd64 \
            --load \
            -t ${{ env.DOCKER_IMAGE }}:test-amd64 \
            --progress=plain \
            .

      - name: "Test ROS environment and packages"
        timeout-minutes: 5
        run: |
          echo "=== Testing ROS environment ==="
          docker run --rm ${{ env.DOCKER_IMAGE }}:test-amd64 bash -c '
            set -e
            source /opt/ros/$ROS_DISTRO/setup.bash
            source /root/catkin_ws/devel/setup.bash
            
            echo "✅ ROS_DISTRO: $ROS_DISTRO"
            echo "✅ ROS_ROOT: $ROS_ROOT"
            echo "✅ ROS_PACKAGE_PATH: $ROS_PACKAGE_PATH"
            
            echo ""
            echo "=== Checking Mars Rover packages ==="
            
            # Check if packages exist (no roscore needed)
            if [ -d "/root/catkin_ws/src/Mars-Rover/rover_description" ]; then
              echo "✅ rover_description found"
            else
              echo "❌ rover_description NOT found"
              exit 1
            fi
            
            if [ -d "/root/catkin_ws/src/Mars-Rover/rover_control" ]; then
              echo "✅ rover_control found"
            else
              echo "❌ rover_control NOT found"
              exit 1
            fi
            
            if [ -d "/root/catkin_ws/src/Mars-Rover/rover_navigation" ]; then
              echo "✅ rover_navigation found"
            else
              echo "❌ rover_navigation NOT found"
              exit 1
            fi
            
            echo ""
            echo "=== Catkin workspace info ==="
            echo "Workspace: $(pwd)"
            
            # Check build artifacts
            if [ -d "/root/catkin_ws/devel" ]; then
              echo "✅ Workspace built (devel/ exists)"
              ls -la /root/catkin_ws/devel/ | head -10
            else
              echo "❌ Workspace NOT built"
              exit 1
            fi
            
            # Check if setup.bash exists
            if [ -f "/root/catkin_ws/devel/setup.bash" ]; then
              echo "✅ setup.bash exists"
            else
              echo "❌ setup.bash NOT found"
              exit 1
            fi
            
            # List packages without roscore
            echo ""
            echo "=== Package structure ==="
            find /root/catkin_ws/src/Mars-Rover -name "package.xml" -exec dirname {} \; | while read pkg; do
              echo "📦 $(basename $pkg)"
            done
            
            # Check URDF files
            echo ""
            echo "=== Checking URDF files ==="
            if [ -f "/root/catkin_ws/src/Mars-Rover/rover_description/urdf/rover_description.urdf" ]; then
              echo "✅ rover_description.urdf exists"
            fi
            
            # Check launch files
            echo ""
            echo "=== Checking launch files ==="
            find /root/catkin_ws/src/Mars-Rover -name "*.launch" | wc -l | xargs echo "Launch files found:"
            
            # Check mesh files
            echo ""
            echo "=== Checking mesh files ==="
            if [ -d "/root/catkin_ws/src/Mars-Rover/rover_description/meshes" ]; then
              echo "Mesh files: $(find /root/catkin_ws/src/Mars-Rover/rover_description/meshes -name "*.STL" | wc -l)"
            fi
            
            echo ""
            echo "✅ All ROS environment tests passed!"
          '

      - name: "Display build summary"
        run: |
          echo "=== Build and Test Summary ==="
          echo "✅ All tests passed successfully!"
          echo "Image: ${{ env.DOCKER_IMAGE }}:test-amd64"
          echo "Platform: linux/amd64"
          docker images | grep mars_rover

  push-to-registry:
    needs: build-and-test
    runs-on: ubuntu-latest
    timeout-minutes: 180
    # Push on main OR anish-part branches, or when manually triggered
    if: |
      (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/anish-part')) ||
      github.event_name == 'workflow_dispatch'
    
    steps:
      - name: "Checkout repository code"
        uses: actions/checkout@v4

      - name: "Free up disk space"
        run: |
          echo "=== Before cleanup ==="
          df -h
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo docker system prune -af
          echo "=== After cleanup ==="
          df -h

      - name: "Set up QEMU"
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64,amd64

      - name: "Set up Docker Buildx"
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host
            image=moby/buildkit:latest

      - name: "Login to Docker Hub"
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: "Set up Docker metadata"
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=raw,value=jetson-nano,enable=${{ github.ref == 'refs/heads/main' }}
            type=raw,value=dev-latest,enable=${{ github.ref == 'refs/heads/anish-part' }}
            type=sha,prefix={{branch}}-

      - name: "Build and push multi-arch image"
        timeout-minutes: 150
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ env.PLATFORMS }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: "Image digest and summary"
        run: |
          echo "### 🚀 Docker Multi-Architecture Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** \`${{ env.DOCKER_IMAGE }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Platforms:** \`${{ env.PLATFORMS }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tags:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Pull Commands" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "**For Jetson Nano (ARM64):**" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ${{ env.DOCKER_IMAGE }}:jetson-nano" >> $GITHUB_STEP_SUMMARY
            echo "docker run -it --runtime nvidia --privileged --network host \\" >> $GITHUB_STEP_SUMMARY
            echo "  ${{ env.DOCKER_IMAGE }}:jetson-nano" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**For x86_64:**" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ${{ env.DOCKER_IMAGE }}:latest" >> $GITHUB_STEP_SUMMARY
            echo "docker run -it --privileged --network host \\" >> $GITHUB_STEP_SUMMARY
            echo "  ${{ env.DOCKER_IMAGE }}:latest" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ github.ref }}" == "refs/heads/anish-part" ]]; then
            echo "**Development Build (anish-part branch):**" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ${{ env.DOCKER_IMAGE }}:dev-latest" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ${{ env.DOCKER_IMAGE }}:anish-part" >> $GITHUB_STEP_SUMMARY
            echo "docker run -it --privileged --network host \\" >> $GITHUB_STEP_SUMMARY
            echo "  ${{ env.DOCKER_IMAGE }}:dev-latest" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ **Note:** This is a development build from the anish-part branch." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Build completed successfully!" >> $GITHUB_STEP_SUMMARY

      - name: "Verify pushed images"
        run: |
          echo "=== Verifying pushed images ==="
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            docker buildx imagetools inspect ${{ env.DOCKER_IMAGE }}:latest
          elif [[ "${{ github.ref }}" == "refs/heads/anish-part" ]]; then
            docker buildx imagetools inspect ${{ env.DOCKER_IMAGE }}:dev-latest
          fi
          echo ""
          echo "=== All tags for this build ==="
          echo "${{ steps.meta.outputs.tags }}" | while read tag; do
            echo "Inspecting: $tag"
            docker buildx imagetools inspect "$tag" --raw | jq -r '.manifests[].platform | "\(.os)/\(.architecture)"' || true
          done